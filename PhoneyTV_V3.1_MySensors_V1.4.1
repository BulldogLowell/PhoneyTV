/*
 * PhoneyTV V3.0
 * by Jim  >> BulldogLowell@gmail.com
 * Inspired by Josh >> Deltanu1142@gmail.com
 *
 * This Sketch illuminates 6 sets of LED's in a random fashion as to mimic the 
 * ambient light eminating from a television.  It is intended to make an empty
 * home (or an empty section of a home) appear to be occupied by someone watching
 * TV.  As an alternative to a real television left on, this uses less than 1%
 * of the electrical energy.
 *
 * With the use of the MySensors plugin and gateway, PhoneyTV is intended to 
 * be used with Vera or Raspberry PI.
 *
 * Sketch does not use any delays to create the random blinking as a way to 
 * assure that communication back to the gateway is as unaffected as possible.
 *
 * You can adjust the length of the blink interval and its "twitchyness" by
 * modifying the random number generators, if you prefer more/less 'motion' in
 * in your unit.  The lines are highlighted in the code.
 *
 * Sketch takes advantage of available PWM on pins 3, 5 & 6 using the wht/blu LEDs 
 * to allow fluctuations in the intensity of the light, enhancing the PhoneyTV's
 * natural ambient light effect.
 *
 * This uses the MySensors.org sketch and will attach itself to your gateway as
 * a light, which was another requirement.  Because of that requirement, it 
 * utilizes one digital output pin in the logic (but not physically) and a relay
 * is not actually required to use this sketch.  Also, the radio pinout remains
 * in tact as to preserve the ease of use for MySensor.org users
 *
 * Created 12-APR-2014
 * Free for distrubution
 * Credit should be given to MySensors.org for their base code for relay control
 * and for the radio configuration.  Thanks Guys.
 *
 * 29-May-2014
 * Version 2:  Simplified the code, removing all redundant relay setup from original 
 * code.  Added an on/off momentary pushputton option to be set up on pin 2.  Inproved  
 * the dark dips for longer duration (can be configured) at intervals.
 *
 * 4-Oct-2014
 * Version 3:
 * Updated for MySensors V1.4
 *
 * 5-Nov-2015
 * Version 3.1: Turned off Relay functionality of node to eliminate network complexity
 * Updated for MySensors V1.4.1
 *
 */
//
#include <MySensor.h>
#include <SPI.h>
#include <Bounce2.h>
//
#define RELAY_PIN  13  // Arduino Digital I/O pin number for relay 
#define BUTTON_PIN  2  // Arduino Digital I/O pin number for button 
#define CHILD_ID 1   // Id of the sensor child
#define RELAY_ON 1
#define RELAY_OFF 0
#define RADIO_ID 5
//
int ledPin3 =  3;      // White using PWM
int ledPin4 =  4;      // Red
int ledPin5 =  5;      // Blue using PWM
int ledPin6 =  6;      // Blue using PWM
int ledPin7 =  7;      // Green
int ledPin8 =  8;      // White (No PWM)
//
Bounce debouncer = Bounce(); 
int oldValue=0;
bool state;
MySensor gw;
MyMessage msg(CHILD_ID,V_LIGHT);
int dipInterval = 10;
int darkTime = 250;
unsigned long currentDipTime;
unsigned long dipStartTime;
unsigned long currentMillis;
int ledState = LOW;
long previousMillis = 0; 
int led = 5;
int interval = 2000;
int twitch = 50;
int dipCount = 0;
int analogLevel = 100;
boolean timeToDip = false;
//
void setup()  
{  
  pinMode(ledPin3, OUTPUT);
  pinMode(ledPin4, OUTPUT); 
  pinMode(ledPin5, OUTPUT);
  pinMode(ledPin6, OUTPUT);
  pinMode(ledPin7, OUTPUT);
  pinMode(ledPin8, OUTPUT);
  //
  pinMode(BUTTON_PIN,INPUT_PULLUP);
  debouncer.attach(BUTTON_PIN);
  debouncer.interval(5);
  gw.begin(incomingMessage, RADIO_ID, false); // Does not create a Radio repeating node
  delay(3000);
  gw.sendSketchInfo("PhoneyTV", "3.1");
  delay(3000);
  gw.present(CHILD_ID, S_LIGHT);
  digitalWrite(RELAY_PIN, RELAY_OFF);
  pinMode(RELAY_PIN, OUTPUT);   
  state = gw.loadState(CHILD_ID);
  digitalWrite(RELAY_PIN, state?RELAY_ON:RELAY_OFF);
}
//
void loop() 
{
  gw.process();
  debouncer.update();
  int value = debouncer.read();
  if (value != oldValue && value==0) 
  {
    gw.send(msg.set(state?false:true), true);
  }
  oldValue = value;
  if (state == true)
  {
    if (timeToDip == false)
    {
      currentMillis = millis();
      if(currentMillis-previousMillis > interval) 
      {
        previousMillis = currentMillis;
        interval = random(750,4001);//Adjusts the interval for more/less frequent random light changes
        twitch = random(40,100);// Twitch provides motion effect but can be a bit much if too high
        dipCount = dipCount++;
      }
      if(currentMillis-previousMillis<twitch)
      {
        led=random(3,9);
        analogLevel=random(50,255);// set the range of the 3 pwm leds
        ledState = ledState == LOW ? HIGH: LOW; // if the LED is off turn it on and vice-versa:
        switch (led) //for the three PWM pins
        {
        case 3:
          pwmWrite();
          break;
        case 5:
          pwmWrite();
          break;
        case 6:
          pwmWrite();
          break;
        default:
          digitalWrite(led, ledState);
        }
        if (dipCount > dipInterval)
        { 
          timeToDip = true;
          dipCount = 0;
          dipStartTime = millis();
          darkTime = random(50,150);
          dipInterval = random(5,250);// cycles of flicker
        }
      } 
    }
    else
    {
      Serial.println("Dip Time");
      currentDipTime = millis();
      if (currentDipTime - dipStartTime < darkTime)
      {
        for (int i=3;i<9;i++)
        {
          digitalWrite(i,LOW);
        }
      }
      else
      {
        timeToDip = false;

      }
    }
  }
  else
  {
    for (int i=3;i<9;i++)
    {
      digitalWrite(i,LOW);
    }
  }
} 
//
void incomingMessage(const MyMessage &message)
{
  if (message.isAck()) 
  {
    Serial.println("This is an ack from gateway");
  }

  if (message.type == V_LIGHT && strlen(msg.getString()) != 0) 
  {
    // Change relay state
    state = message.getBool();
    digitalWrite(RELAY_PIN, state?RELAY_ON:RELAY_OFF);
    // Store state in eeprom
    gw.saveState(CHILD_ID, state);
    Serial.print("Incoming change for sensor:");
    Serial.print(message.sensor);
    Serial.print(", New status: ");
    Serial.println(message.getBool());
  } 
}
//
void pwmWrite() 
{
  if (ledState==HIGH)
  {
    analogWrite(led,analogLevel);
  }
  else{
    digitalWrite(led,LOW);
  }
}

